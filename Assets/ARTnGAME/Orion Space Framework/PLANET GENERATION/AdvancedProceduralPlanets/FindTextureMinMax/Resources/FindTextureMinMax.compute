#pragma kernel firstStep
#pragma kernel otherSteps
#pragma kernel finalStep


Texture2D<float4> _initialTextureIn;




Texture2D<float4> _textureMinIn;
Texture2D<float4> _textureMaxIn;


RWTexture2D<float4> _textureMinOut;
RWTexture2D<float4> _textureMaxOut;


struct MinMax
{
	float4 min;
	float4 max;
};
RWStructuredBuffer<MinMax> _finalDataOut;

#define NUM_THREADS 16

[numthreads(NUM_THREADS, NUM_THREADS, 1)]
void firstStep(uint3 id : SV_DispatchThreadID)
{
	int w, h;
	_initialTextureIn.GetDimensions(w, h);

	uint2 i = id.xy * 2;
	if (i.x >= w || i.y >= h) return;

	float4 v0 = _initialTextureIn[i];
	float4 v1 = _initialTextureIn[i + int2(1, 0)];
	float4 v2 = _initialTextureIn[i + int2(0, 1)];
	float4 v3 = _initialTextureIn[i + int2(1, 1)];

	_textureMinOut[id.xy] = min(min(v0, v1), min(v2, v3));
	_textureMaxOut[id.xy] = max(max(v0, v1), max(v2, v3));
}


[numthreads(NUM_THREADS, NUM_THREADS, 1)]
void otherSteps(uint3 id : SV_DispatchThreadID)
{
	int w, h;
	_textureMinIn.GetDimensions(w, h);

	uint2 i = id.xy * 2;
	if (i.x >= w || i.y >= h) return;

	float4 v0 = _textureMinIn[i];
	float4 v1 = _textureMinIn[i + int2(1, 0)];
	float4 v2 = _textureMinIn[i + int2(0, 1)];
	float4 v3 = _textureMinIn[i + int2(1, 1)];

	_textureMinOut[id.xy] = min(min(v0, v1), min(v2, v3));

	v0 = _textureMaxIn[i];
	v1 = _textureMaxIn[i + int2(1, 0)];
	v2 = _textureMaxIn[i + int2(0, 1)];
	v3 = _textureMaxIn[i + int2(1, 1)];

	_textureMaxOut[id.xy] = max(max(v0, v1), max(v2, v3));
}


[numthreads(1, 1, 1)]
void finalStep(uint3 id : SV_DispatchThreadID)
{
	uint2 i = id.xy * 2;

	float4 v0 = _textureMinIn[i];
	float4 v1 = _textureMinIn[i + int2(1, 0)];
	float4 v2 = _textureMinIn[i + int2(0, 1)];
	float4 v3 = _textureMinIn[i + int2(1, 1)];

	_finalDataOut[0].min = min(min(v0, v1), min(v2, v3));

	v0 = _textureMaxIn[i];
	v1 = _textureMaxIn[i + int2(1, 0)];
	v2 = _textureMaxIn[i + int2(0, 1)];
	v3 = _textureMaxIn[i + int2(1, 1)];

	_finalDataOut[0].max = max(max(v0, v1), max(v2, v3));
}

